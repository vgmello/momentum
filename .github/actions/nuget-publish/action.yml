name: "Publish NuGet Packages"
description: "Pack and publish NuGet packages"

inputs:
  path:
    description: "Path to the project or solution to pack"
    required: true
  config:
    description: "MS Build configuration"
    required: false
    default: "Release"
  package-version:
    description: "Version to use for the packages"
    required: true
  pack-args:
    description: "Additional arguments for dotnet pack"
    required: false
    default: ""
  nuget-api-key:
    description: "NuGet API key for publishing"
    required: true
  nuget-source:
    description: "NuGet source URL"
    required: false
    default: "https://api.nuget.org/v3/index.json"
  skip-duplicate:
    description: "Skip duplicate packages"
    required: false
    default: "true"
  dry-run:
    description: "Perform a dry run without actually publishing"
    required: false
    default: "false"

outputs:
  published-packages:
    description: "List of published packages"
    value: ${{ steps.publish.outputs.packages }}
  output-dir:
    description: "Packages output dir"
    value: ${{ steps.pack.outputs.output_dir }}

runs:
  using: "composite"
  steps:
    - name: Pack packages
      id: pack
      shell: bash
      run: |
        # Define fixed temp directory for packages
        NUGET_OUTPUT_DIR="./_tmp_nuget_output"

        # Clean and create output directory
        echo "üßπ Cleaning output directory: $NUGET_OUTPUT_DIR"
        rm -rf "$NUGET_OUTPUT_DIR"
        mkdir -p "$NUGET_OUTPUT_DIR"

        echo "üì¶ Packing packages with version ${{ inputs.package-version }}..."

        # Run dotnet pack with fixed output and no-build
        dotnet pack "${{ inputs.path }}" \
          --configuration ${{ inputs.config }} \
          --no-build \
          -p:PackageVersion=${{ inputs.package-version }} \
          --output "$NUGET_OUTPUT_DIR" \
          ${{ inputs.pack-args }}

        if [ $? -ne 0 ]; then
          echo "‚ùå Package creation failed"
          exit 1
        fi

        echo "‚úÖ Packages created successfully in $NUGET_OUTPUT_DIR"
        echo "output_dir=$NUGET_OUTPUT_DIR" >> $GITHUB_OUTPUT

    - name: Find packages
      id: find-packages
      shell: bash
      run: |
        NUGET_OUTPUT_DIR="./_tmp_nuget_output"

        echo "üîç Finding NuGet packages in '$NUGET_OUTPUT_DIR'..."

        # Simple list of all nupkg files in the fixed directory
        PACKAGES=$(ls -1 "$NUGET_OUTPUT_DIR"/*.nupkg 2>/dev/null | sort)

        if [ -z "$PACKAGES" ]; then
          echo "‚ùå No packages found to publish in $NUGET_OUTPUT_DIR"
          echo "Directory contents:"
          ls -la "$NUGET_OUTPUT_DIR"
          exit 1
        fi

        echo "Found packages:"
        for pkg in $PACKAGES; do
          echo "  - $(basename $pkg)"
        done

        # Save package list for output
        echo "packages<<EOF" >> $GITHUB_OUTPUT
        echo "$PACKAGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Publish to NuGet
      id: publish
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        SOURCE_NAME=""
        if [[ "${{ inputs.nuget-source }}" == *"nugettest.org"* ]]; then
          SOURCE_NAME="NuGet Test"
        else
          SOURCE_NAME="NuGet.org"
        fi

        echo "üöÄ Publishing packages to $SOURCE_NAME..."
        echo "   Source: ${{ inputs.nuget-source }}"

        PACKAGES="${{ steps.find-packages.outputs.packages }}"
        PUBLISHED_LIST=""
        SUCCESS_COUNT=0
        TOTAL_COUNT=0

        for package in $PACKAGES; do
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          PKG_NAME=$(basename "$package")
          echo ""
          echo "[$TOTAL_COUNT] Publishing $PKG_NAME..."

          SKIP_FLAG=""
          if [ "${{ inputs.skip-duplicate }}" == "true" ]; then
            SKIP_FLAG="--skip-duplicate"
          fi

          dotnet nuget push "$package" \
            --api-key ${{ inputs.nuget-api-key }} \
            --source ${{ inputs.nuget-source }} \
            --no-symbols \
            $SKIP_FLAG

          RESULT=$?
          if [ $RESULT -eq 0 ]; then
            echo "   ‚úÖ Successfully published $PKG_NAME"
            PUBLISHED_LIST="$PUBLISHED_LIST$PKG_NAME\n"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          elif [ $RESULT -eq 1 ] && [ "${{ inputs.skip-duplicate }}" == "true" ]; then
            # Check if error was due to duplicate
            echo "   ‚è≠Ô∏è Skipped $PKG_NAME (may already exist)"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          else
            echo "   ‚ùå Failed to publish $PKG_NAME"
            exit 1
          fi
        done

        echo ""
        echo "üéâ Published $SUCCESS_COUNT/$TOTAL_COUNT packages to $SOURCE_NAME!"
        echo "packages<<EOF" >> $GITHUB_OUTPUT
        echo -e "$PUBLISHED_LIST" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Dry run summary
      if: inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "üîç DRY RUN - The following packages would be published:"
        PACKAGES="${{ steps.find-packages.outputs.packages }}"
        for package in $PACKAGES; do
          echo "  - $(basename $package)"
        done
        echo ""
        echo "Target: ${{ inputs.nuget-source }}"
