name: "Calculate Version"
description: "Calculate version for releases and pre-releases"

inputs:
  version-file:
    description: "Path to version file"
    required: false
    default: "libs/Momentum/version.txt"
  release-type:
    description: "Type of release (stable/prerelease)"
    required: false
    default: "stable"
  check-changes:
    description: "Check for consumer-visible changes"
    required: false
    default: "false"
  change-path:
    description: "Path to check for changes"
    required: false
    default: "libs/Momentum/src"

outputs:
  version:
    description: "Calculated version"
    value: ${{ steps.calculate.outputs.version }}
  tag:
    description: "Version tag"
    value: ${{ steps.calculate.outputs.tag }}
  skip:
    description: "Whether to skip release"
    value: ${{ steps.skip-check.outputs.skip }}
  has-prerelease:
    description: "Whether pre-releases exist for this version"
    value: ${{ steps.check-prerelease.outputs.has_prerelease }}

runs:
  using: "composite"
  steps:
    - name: Check for consumer-visible changes
      id: changes
      if: inputs.check-changes == 'true'
      shell: bash
      run: |
        echo "🔍 Checking for consumer-visible changes in ${{ inputs.change-path }}..."

        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^${{ inputs.change-path }}" || true)

        if [ -z "$CHANGED_FILES" ]; then
          echo "No changes in ${{ inputs.change-path }}, skipping release"
          echo "skip=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        CONSUMER_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(cs|csproj|props|targets)$' | grep -v -E '(Test|\.Tests\.|\.md$|\.gitignore$|\.editorconfig$)' || true)

        if [ -z "$CONSUMER_CHANGES" ]; then
          echo "No consumer-visible changes, skipping release"
          echo "skip=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "✅ Consumer-visible changes detected"
        echo "skip=false" >> $GITHUB_OUTPUT

    - name: Set skip flag
      id: skip-check
      shell: bash
      run: |
        if [ "${{ inputs.check-changes }}" == "true" ]; then
          echo "skip=${{ steps.changes.outputs.skip }}" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Read version file
      id: file-version
      if: steps.skip-check.outputs.skip != 'true'
      shell: bash
      run: |
        if [ ! -f "${{ inputs.version-file }}" ]; then
          echo "❌ Error: ${{ inputs.version-file }} not found"
          exit 1
        fi

        FILE_VERSION=$(cat ${{ inputs.version-file }} | tr -d '[:space:]')

        if ! [[ $FILE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Error: Invalid version format: $FILE_VERSION"
          exit 1
        fi

        echo "📋 File version: $FILE_VERSION"
        echo "version=$FILE_VERSION" >> $GITHUB_OUTPUT

    - name: Find previous releases
      id: previous
      if: steps.skip-check.outputs.skip != 'true'
      shell: bash
      run: |
        # Find latest regular release tag
        set +o pipefail
        PREV_TAG=$(git tag -l "v*.*.*" --sort=-v:refname | grep -v 'pre' | head -1)
        set -o pipefail

        if [ -z "$PREV_TAG" ]; then
          echo "No previous regular release found"
          PREV_TAG="v0.0.0"
        fi

        echo "Previous regular release: $PREV_TAG"
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        echo "prev_version=$(echo $PREV_TAG | sed 's/^v//')" >> $GITHUB_OUTPUT

    - name: Check for pre-releases
      id: check-prerelease
      if: steps.skip-check.outputs.skip != 'true'
      shell: bash
      run: |
        FILE_VERSION="${{ steps.file-version.outputs.version }}"
        LATEST_PRERELEASE=$(git tag -l "v${FILE_VERSION}-pre.*" --sort=-v:refname | head -1)

        if [ -n "$LATEST_PRERELEASE" ]; then
          echo "Found pre-release: $LATEST_PRERELEASE"
          echo "has_prerelease=true" >> $GITHUB_OUTPUT
          echo "latest_prerelease=$LATEST_PRERELEASE" >> $GITHUB_OUTPUT

          SEQUENCE=$(echo $LATEST_PRERELEASE | sed -n 's/.*-pre\.\([0-9]\+\)$/\1/p')
          echo "prerelease_sequence=$SEQUENCE" >> $GITHUB_OUTPUT
        else
          echo "has_prerelease=false" >> $GITHUB_OUTPUT
          echo "prerelease_sequence=0" >> $GITHUB_OUTPUT
        fi

    - name: Calculate version
      id: calculate
      if: steps.skip-check.outputs.skip != 'true'
      shell: bash
      run: |
        FILE_VERSION="${{ steps.file-version.outputs.version }}"
        PREV_VERSION="${{ steps.previous.outputs.prev_version }}"
        HAS_PRERELEASE="${{ steps.check-prerelease.outputs.has_prerelease }}"
        PRERELEASE_SEQUENCE="${{ steps.check-prerelease.outputs.prerelease_sequence }}"
        RELEASE_TYPE="${{ inputs.release-type }}"

        # Version comparison function
        version_greater() {
            [ "$(printf '%s\n' "$1" "$2" | sort -V | tail -n1)" = "$1" ]
        }

        if [ "$RELEASE_TYPE" == "prerelease" ]; then
          # Calculate pre-release version
          if [ "$HAS_PRERELEASE" == "true" ]; then
            # Increment pre-release sequence
            NEXT_SEQUENCE=$((PRERELEASE_SEQUENCE + 1))
            CALCULATED_VERSION="${FILE_VERSION}-pre.${NEXT_SEQUENCE}"
            echo "ℹ️  Incrementing pre-release: sequence $PRERELEASE_SEQUENCE → $NEXT_SEQUENCE"
          else
            # First pre-release for this version
            CALCULATED_VERSION="${FILE_VERSION}-pre.1"
            echo "ℹ️  First pre-release for version $FILE_VERSION"
          fi
        else
          # Calculate stable release version
          if [ "$HAS_PRERELEASE" == "true" ]; then
            # Transitioning from pre-release to stable
            CALCULATED_VERSION="$FILE_VERSION"
            echo "ℹ️  Transitioning from pre-release to stable: $CALCULATED_VERSION"
          elif version_greater "$FILE_VERSION" "$PREV_VERSION"; then
            # Use file version (higher than previous)
            CALCULATED_VERSION="$FILE_VERSION"
            echo "ℹ️  Using file version: $CALCULATED_VERSION (> $PREV_VERSION)"
          else
            # Increment patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$PREV_VERSION"
            CALCULATED_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            echo "ℹ️  Incrementing patch: $PREV_VERSION → $CALCULATED_VERSION"
          fi
        fi

        CALCULATED_TAG="v$CALCULATED_VERSION"

        echo "📋 Calculated version: $CALCULATED_VERSION"
        echo "📋 Calculated tag: $CALCULATED_TAG"

        echo "version=$CALCULATED_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$CALCULATED_TAG" >> $GITHUB_OUTPUT
