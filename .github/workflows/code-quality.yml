name: "Code Quality Analysis"

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "libs/Momentum/src/**"
      - "tests/**"
      - "*.slnx"
      - "*.csproj"
      - "Directory.*.props"

  pull_request:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "libs/Momentum/src/**"
      - "tests/**"
      - "*.slnx"
      - "*.csproj"
      - "Directory.*.props"

  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

concurrency:
  group: code-quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/Directory.*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-sonar-

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner-${{ hashFiles('**/.config/dotnet-tools.json') }}
        restore-keys: ${{ runner.os }}-sonar-scanner-

    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        New-Item -Path "./.sonar/scanner" -ItemType Directory -Force | Out-Null
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner --verbosity minimal

    - name: Initialize CodeQL and SonarQube
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        build-mode: manual

    - name: Start SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        Write-Host "üîç Starting SonarQube analysis..."
        & "./.sonar/scanner/dotnet-sonarscanner" begin `
          /k:"vgmello_momentum" `
          /o:"vgmello" `
          /d:sonar.token="$env:SONAR_TOKEN" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
          /d:sonar.coverage.exclusions="**/*Tests*/**,**/Program.cs,**/*.Generated.cs"

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Build solution (for both CodeQL and SonarQube)
      run: |
        # Single build for both CodeQL and SonarQube analysis
        dotnet build --configuration Release --no-restore --verbosity minimal

    - name: Run unit tests with coverage
      shell: pwsh
      run: |
        Write-Host "üß™ Running unit tests with coverage..."
        try {
          dotnet test `
            --configuration Release `
            --no-build `
            --verbosity minimal `
            --filter "Category=Unit" `
            --collect:"XPlat Code Coverage" `
            --results-directory ./TestResults/ `
            --logger "trx;LogFileName=test_results.trx" `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        }
        catch {
          Write-Host "‚ö†Ô∏è Test execution failed, continuing with analysis..."
        }

    - name: Complete CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

    - name: Complete SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        Write-Host "üìä Completing SonarQube analysis..."
        & "./.sonar/scanner/dotnet-sonarscanner" end /d:sonar.token="$env:SONAR_TOKEN"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v5
      with:
        name: test-results
        path: TestResults/
        retention-days: 7
