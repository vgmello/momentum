name: Deploy Momentum Template

on:
  push:
    branches:
      - main
    paths:
      - ".template.config/**"
      - "src/**"
      - "docs/**"
      - "infra/**"
      - "tests/**"
      - "libs/Momentum/src/**"
      - "libs/Momentum/Momentum.Template.csproj"
      - "compose.yml"
      - "README.md"
      - "ProjectREADME.md"
      - "Directory.Build.props"
      - "Directory.Packages.props"
      - "AppDomain.slnx"
      - "AppDomain.ruleset"
      - ".gitignore"
      - ".vscode/**"
    tags:
      - "template-v*.*.*"
  workflow_dispatch:
    inputs:
      deploy-type:
        description: "Deployment type"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release
          - test-prerelease
          - test-release

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

concurrency:
  group: deploy-template-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure deployment
        id: config
        uses: ./.github/actions/deployment-config
        with:
          deploy-type: ${{ github.event.inputs.deploy-type }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-test-api-key: ${{ secrets.NUGET_TEST_API_KEY }}

      - name: Find latest release
        id: latest-version
        shell: pwsh
        run: |
          function Write-GitHubOutput {
              param([string]$Name, [string]$Value)
              if ($env:GITHUB_OUTPUT) {
                  "$Name=$Value" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              }
              Write-Host "Output: $Name=$Value"
          }

          $deployPrerelease = "${{ steps.config.outputs.deploy-prerelease }}"
          $tagPrefix = "template-v"

          Write-Host "Using template tag format with prefix: $tagPrefix"

          # Find latest template release tag (excluding pre-releases)
          $allTags = git tag -l "${tagPrefix}*.*.*" --sort=-v:refname
          $currentTag = $allTags | Where-Object { $_ -notmatch 'pre' } | Select-Object -First 1

          if (-not $currentTag) {
              Write-Host "No previous template release found"
              $currentTag = "${tagPrefix}0.0.1"
          }

          Write-Host "Current template release: $currentTag"
          $currentVersion = $currentTag -replace "^$tagPrefix", ""

          Write-GitHubOutput -Name "current_version" -Value $currentVersion

      - name: Set Momentum lib for template
        id: set-lib-version
        shell: pwsh
        run: |
          $version = "${{ steps.latest-version.outputs.current_version }}"
          $filePath = ".template.config/template.json"

          Write-Host "Updating $filePath with version: $version"

          # Read the file content
          $content = Get-Content $filePath -Raw

          # Replace the version placeholder
          $updatedContent = $content -replace '__CI_MOMENTUM_VERSION__', $version

          # Write the updated content back
          $updatedContent | Set-Content $filePath -Encoding utf8

          Write-Host "✅ Updated $filePath with version: $version"

      - name: Calculate pre-release version
        if: steps.config.outputs.deploy-prerelease == 'true'
        id: prerelease-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          release-type: prerelease
          check-changes: false

      - name: Generate pre-release notes
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.prerelease-version.outputs.version }}
          tag: ${{ steps.prerelease-version.outputs.tag }}
          release-type: prerelease
          output-file: prerelease_notes.md

      - name: Create GitHub pre-release
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true' && steps.config.outputs.is-test != 'true'
        shell: pwsh
        run: |
          & ./.github/scripts/Create-GitHubRelease.ps1 `
            -Tag "${{ steps.prerelease-version.outputs.tag }}" `
            -Title "Momentum Template ${{ steps.prerelease-version.outputs.version }}" `
            -NotesFile "prerelease_notes.md" `
            -Prerelease `
            -Target "main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish pre-release packages
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.Template.csproj
          package-version: ${{ steps.prerelease-version.outputs.version }}
          pack-args: -p:PackTemplate=true --restore
          nuget-api-key: ${{ steps.config.outputs.nuget-api-key }}
          nuget-source: ${{ steps.config.outputs.nuget-source }}

      - name: Verify main branch for release
        if: steps.config.outputs.deploy-prerelease == 'false'
        shell: pwsh
        run: |
          $currentBranch = git rev-parse --abbrev-ref HEAD
          if ($currentBranch -ne "main") {
            Write-Error "❌ Release must be created from main branch. Current: $currentBranch"
            exit 1
          }
          Write-Host "✅ Confirmed on main branch"

      - name: Calculate release version
        if: steps.config.outputs.deploy-prerelease == 'false'
        id: release-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          release-type: stable
          check-changes: false

      - name: Generate release notes
        if: steps.config.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.release-version.outputs.version }}
          tag: ${{ steps.release-version.outputs.tag }}
          release-type: stable
          output-file: release_notes.md

      - name: Create GitHub release
        if: steps.config.outputs.deploy-prerelease == 'false' && steps.config.outputs.is-test != 'true'
        shell: pwsh
        run: |
          & ./.github/scripts/Create-GitHubRelease.ps1 `
            -Tag "${{ steps.release-version.outputs.tag }}" `
            -Title "Momentum Template v${{ steps.release-version.outputs.version }}" `
            -NotesFile "release_notes.md" `
            -Target "main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release packages
        if: steps.config.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.Template.csproj
          package-version: ${{ steps.release-version.outputs.version }}
          pack-args: -p:PackTemplate=true --restore
          nuget-api-key: ${{ steps.config.outputs.nuget-api-key }}
          nuget-source: ${{ steps.config.outputs.nuget-source }}

      - name: Deployment Summary
        shell: pwsh
        run: |
          $args = @(
            "-PrereleaseVersion", "${{ steps.prerelease-version.outputs.version }}",
            "-PrereleaseTag", "${{ steps.prerelease-version.outputs.tag }}",
            "-ReleaseVersion", "${{ steps.release-version.outputs.version }}",
            "-ReleaseTag", "${{ steps.release-version.outputs.tag }}",
            "-NugetSource", "${{ steps.config.outputs.nuget-source }}"
          )

          if ("${{ steps.config.outputs.is-test }}" -eq "true") {
            $args += "-IsTest"
          }

          if ("${{ steps.config.outputs.deploy-prerelease }}" -eq "true") {
            $args += "-DeployPrerelease"
          }

          if ("${{ steps.prerelease-version.outputs.skip }}" -eq "true") {
            $args += "-PrereleaseSkip"
          }

          & ./.github/scripts/Write-DeploymentSummary.ps1 @args
