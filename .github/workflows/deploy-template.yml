name: Deploy Momentum Template

on:
  push:
    branches:
      - main
    paths:
      - ".template.config/**"
      - "src/**"
      - "docs/**"
      - "infra/**"
      - "tests/**"
      - "libs/Momentum/src/**"
      - "libs/Momentum/Momentum.Template.csproj"
      - "compose.yml"
      - "README.md"
      - "ProjectREADME.md"
      - "Directory.Build.props"
      - "Directory.Packages.props"
      - "AppDomain.slnx"
      - "AppDomain.ruleset"
      - ".gitignore"
      - ".vscode/**"
    tags:
      - "template-v*.*.*"
  workflow_dispatch:
    inputs:
      deploy-type:
        description: "Deployment type"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release
          - test-prerelease
          - test-release

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

concurrency:
  group: deploy-template-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure deployment
        id: config
        uses: ./.github/actions/deployment-config
        with:
          deploy-type: ${{ github.event.inputs.deploy-type }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-test-api-key: ${{ secrets.NUGET_TEST_API_KEY }}

      - name: Find latest release
        id: latest-version
        shell: bash
        run: |
          # Always use template- prefix for template releases
          TAG_PREFIX="template-v"
          echo "Using template tag format with prefix: ${TAG_PREFIX}"

          if [[ "${{ steps.config.outputs.deploy-prerelease }}" == true ]]; then
            TAG_SUFFIX="-pre"
          else
            TAG_SUFFIX=""
          fi

          # Find latest template release tag (excluding pre-releases)
          set +o pipefail
          CURRENT_TAG=$(git tag -l "${TAG_PREFIX}*.*.*" --sort=-v:refname | grep -v 'pre' | head -1)
          set -o pipefail

          if [ -z "$CURRENT_TAG" ]; then
            echo "No previous template release found"
            CURRENT_TAG="${TAG_PREFIX}0.0.1"
          fi

          echo "Current template release: $CURRENT_TAG"
          echo "current_version=$(echo $CURRENT_TAG | sed "s/^${TAG_PREFIX}//")" >> $GITHUB_OUTPUT

      - name: Set Momentum lib for template
        id: set-lib-version
        shell: bash
        run: |
          sed -i 's/$(TemplateMomentumVersion)/'"${{ steps.latest-version.outputs.current_version }}"'/g' Directory.Packages.props
          echo "Updated Directory.Packages.props with version: ${{ steps.latest-version.outputs.current_version }}"

      - name: Calculate pre-release version
        if: steps.config.outputs.deploy-prerelease == 'true'
        id: prerelease-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          release-type: prerelease
          check-changes: false

      - name: Generate pre-release notes
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.prerelease-version.outputs.version }}
          tag: ${{ steps.prerelease-version.outputs.tag }}
          release-type: prerelease
          output-file: prerelease_notes.md

      - name: Create GitHub pre-release
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true' && steps.config.outputs.is-test != 'true'
        run: |
          gh release create "${{ steps.prerelease-version.outputs.tag }}" \
            --title "Momentum Template ${{ steps.prerelease-version.outputs.version }}" \
            --notes-file prerelease_notes.md \
            --prerelease \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish pre-release packages
        if: steps.config.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.Template.csproj
          package-version: ${{ steps.prerelease-version.outputs.version }}
          pack-args: -p:PackTemplate=true --restore
          nuget-api-key: ${{ steps.config.outputs.nuget-api-key }}
          nuget-source: ${{ steps.config.outputs.nuget-source }}

      - name: Verify main branch for release
        if: steps.config.outputs.deploy-prerelease == 'false'
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "‚ùå Release must be created from main branch. Current: $CURRENT_BRANCH"
            exit 1
          fi
          echo "‚úÖ Confirmed on main branch"

      - name: Calculate release version
        if: steps.config.outputs.deploy-prerelease == 'false'
        id: release-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          release-type: stable
          check-changes: false

      - name: Generate release notes
        if: steps.config.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.release-version.outputs.version }}
          tag: ${{ steps.release-version.outputs.tag }}
          release-type: stable
          output-file: release_notes.md

      - name: Create GitHub release
        if: steps.config.outputs.deploy-prerelease == 'false' && steps.config.outputs.is-test != 'true'
        run: |
          gh release create "${{ steps.release-version.outputs.tag }}" \
            --title "Momentum Template v${{ steps.release-version.outputs.version }}" \
            --notes-file release_notes.md \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release packages
        if: steps.config.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.Template.csproj
          package-version: ${{ steps.release-version.outputs.version }}
          pack-args: -p:PackTemplate=true --restore
          nuget-api-key: ${{ steps.config.outputs.nuget-api-key }}
          nuget-source: ${{ steps.config.outputs.nuget-source }}

      - name: Deployment Summary
        run: |
          echo "# üìä Deployment Summary"
          echo ""

          if [ "${{ steps.config.outputs.is-test }}" == "true" ]; then
            echo "üß™ **Test Deployment Mode**"
            echo "   - NuGet Source: ${{ steps.config.outputs.nuget-source }}"
            echo ""
          fi

          if [ "${{ steps.config.outputs.deploy-prerelease }}" == "true" ]; then
            if [ "${{ steps.prerelease-version.outputs.skip }}" == "true" ]; then
              echo "‚è≠Ô∏è Pre-release skipped (no consumer-visible changes)"
            elif [ -n "${{ steps.prerelease-version.outputs.version }}" ]; then
              echo "‚úÖ **Pre-release deployed**"
              echo "   - Version: ${{ steps.prerelease-version.outputs.version }}"
              echo "   - Tag: ${{ steps.prerelease-version.outputs.tag }}"
              echo "   - NuGet: ${{ steps.config.outputs.nuget-source }}"
              if [ "${{ steps.config.outputs.is-test }}" != "true" ]; then
                echo "   - GitHub Release: Created"
              fi
            else
              echo "‚ùå **Pre-release failed**"
            fi
          fi

          if [ "${{ steps.config.outputs.deploy-prerelease }}" == "false" ]; then
            if [ -n "${{ steps.release-version.outputs.version }}" ]; then
              echo "‚úÖ **Release deployed**"
              echo "   - Version: ${{ steps.release-version.outputs.version }}"
              echo "   - Tag: ${{ steps.release-version.outputs.tag }}"
              echo "   - NuGet: ${{ steps.config.outputs.nuget-source }}"
              if [ "${{ steps.config.outputs.is-test }}" != "true" ]; then
                echo "   - GitHub Release: Created"
              fi
            else
              echo "‚ùå **Release failed**"
            fi
          fi
