name: Publish Momentum Template

on:
  push:
    branches:
      - main
    paths:
      - ".template.config/**"
      - ".vscode/**"
      - "src/**"
      - "docs/**"
      - "infra/**"
      - "tests/**"
      - "libs/Momentum/src/**"
      - "libs/Momentum/Momentum.Template.csproj"
      - "compose.yml"
      - "README.md"
      - "ProjectREADME.md"
      - "Directory.Build.props"
      - "Directory.Packages.props"
      - "AppDomain.slnx"
      - "AppDomain.ruleset"
      - ".gitignore"

    tags:
      - "release"

  workflow_dispatch:
    inputs:
      deploy-type:
        description: "Deployment type"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_SOURCE: "https://api.nuget.org/v3/index.json"

concurrency:
  group: deploy-template-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure deployment
        id: config
        uses: ./.github/actions/deployment-config
        with:
          deploy-type: ${{ github.event.inputs.deploy-type }}

      - name: Find latest momentum version
        id: latest-mmt-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          prerelease: ${{ steps.config.outputs.prerelease }}
          tag-prefix: "v"

      - name: Set Momentum lib for template
        id: set-lib-version
        shell: pwsh
        run: |
          $version = "${{ steps.latest-mmt-version.outputs.current_version }}"
          $filePath = ".template.config/template.json"

          Write-Host "Updating $filePath with version: $version"

          # Read the file content
          $content = Get-Content $filePath -Raw

          # Replace the version placeholder
          $updatedContent = $content -replace '__CI_MOMENTUM_VERSION__', $version

          # Write the updated content back
          $updatedContent | Set-Content $filePath -Encoding utf8

          Write-Host "âœ… Updated $filePath with version: $version"

      - name: Calculate release version
        id: release-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: .template.config/version.txt
          prerelease: ${{ steps.config.outputs.prerelease }}
          tag-prefix: "template-v"

      - name: Generate release notes
        id: release-notes
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.release-version.outputs.next-version }}
          tag: ${{ steps.release-version.outputs.next-tag }}
          previous-tag: ${{ steps.release-version.outputs.current-tag }}

      - name: Create GitHub release
        shell: pwsh
        run: |
          & ./.github/scripts/Create-GitHubRelease.ps1 `
            -Tag "${{ steps.release-version.outputs.next-tag }}" `
            -Title "Momentum Template ${{ steps.release-version.outputs.next-tag }}" `
            -NotesFile "${{ steps.release-notes.outputs.release-notes-file }}" `
            ${{ steps.config.outputs.prerelease == 'true' && '-Prerelease' || '' }} `
            -Target "main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.Template.csproj
          package-version: ${{ steps.release-version.outputs.next-version }}
          pack-args: -p:PackTemplate=true --restore
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-source: ${{ env.NUGET_SOURCE }}

      - name: Deployment Summary
        shell: pwsh
        run: |
          $args = @(
            "-ReleaseVersion", "${{ steps.release-version.outputs.next-version }}",
            "-ReleaseTag", "${{ steps.release-version.outputs.next-tag }}",
            "-NugetSource", "${{ env.NUGET_SOURCE }}"
          )

          if ("${{ steps.config.outputs.prerelease }}" -eq "true") {
            $args += "-DeployPrerelease"
          }

          & ./.github/scripts/Write-DeploymentSummary.ps1 @args
