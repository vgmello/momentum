name: Deploy Momentum Libraries

on:
  push:
    branches:
      - main
    paths:
      - "libs/Momentum/src/**"
      - "libs/Momentum/docs/**"
    tags:
      - "release"
      - "v*.*.*"

  workflow_dispatch:
    inputs:
      deploy-type:
        description: "Type of deployment"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release
          - docs-only
          - test-prerelease
          - test-release
      check-changes:
        description: "Check for lib changes"
        required: false
        default: false
        type: boolean
      nuget-source:
        description: "NuGet source (for testing)"
        required: false
        default: "https://api.nuget.org/v3/index.json"

env:
  DOTNET_VERSION: "9.0.x"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.docs-deployment.outputs.page_url }}

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get deployment Config
        id: options
        uses: ./.github/actions/deployment-config
        with:
          deploy-type: ${{ github.event.inputs.deploy-type }}
          nuget-source-override: ${{ github.event.inputs.nuget-source }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-test-api-key: ${{ secrets.NUGET_TEST_API_KEY }}

      - name: Build .NET projects
        uses: ./.github/actions/build
        with:
          build-target: libs/Momentum/Momentum.slnx

      - name: Calculate pre-release version
        if: steps.options.outputs.deploy-prerelease == 'true'
        id: prerelease-version
        uses: ./.github/actions/version-calculate
        with:
          release-type: prerelease
          check-changes: ${{ github.event.inputs.check-changes }}

      - name: Generate pre-release notes
        if: steps.options.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.prerelease-version.outputs.version }}
          tag: ${{ steps.prerelease-version.outputs.tag }}
          release-type: prerelease
          output-file: prerelease_notes.md

      - name: Create GitHub pre-release
        if: steps.options.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true' && steps.options.outputs.is-test != 'true'
        run: |
          gh release create ${{ steps.prerelease-version.outputs.tag }} \
            --title "Momentum Libraries ${{ steps.prerelease-version.outputs.tag }} (Pre-release)" \
            --notes-file prerelease_notes.md \
            --prerelease \
            --draft=false \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish pre-release packages
        if: steps.options.outputs.deploy-prerelease == 'true' && steps.prerelease-version.outputs.skip != 'true'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.slnx
          package-version: ${{ steps.prerelease-version.outputs.version }}
          nuget-api-key: ${{ steps.options.outputs.nuget-api-key }}
          nuget-source: ${{ steps.options.outputs.nuget-source }}

      - name: Verify main branch for release
        if: steps.options.outputs.deploy-prerelease == 'false'
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "‚ùå Release must be created from main branch. Current: $CURRENT_BRANCH"
            exit 1
          fi
          echo "‚úÖ Confirmed on main branch"

      - name: Calculate release version
        if: steps.options.outputs.deploy-prerelease == 'false'
        id: release-version
        uses: ./.github/actions/version-calculate
        with:
          version-file: libs/Momentum/version.txt
          check-changes: false

      - name: Generate release notes
        if: steps.options.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/generate-release-notes
        with:
          version: ${{ steps.release-version.outputs.version }}
          tag: ${{ steps.release-version.outputs.tag }}
          output-file: release_notes.md

      - name: Create GitHub release
        if: steps.options.outputs.deploy-prerelease == 'false' && steps.options.outputs.is-test != 'true'
        run: |
          gh release create ${{ steps.release-version.outputs.tag }} \
            --title "Momentum Libraries ${{ steps.release-version.outputs.tag }}" \
            --notes-file release_notes.md \
            --draft=false \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release packages
        if: steps.options.outputs.deploy-prerelease == 'false'
        uses: ./.github/actions/nuget-publish
        with:
          path: libs/Momentum/Momentum.slnx
          package-version: ${{ steps.release-version.outputs.version }}
          nuget-api-key: ${{ steps.options.outputs.nuget-api-key }}
          nuget-source: ${{ steps.options.outputs.nuget-source }}

      - name: Setup Pages
        if: steps.options.outputs.deploy-docs == 'true'
        uses: actions/configure-pages@v5

      - name: Build documentation
        if: steps.options.outputs.deploy-docs == 'true'
        uses: ./.github/actions/docs-build
        with:
          docs-path: libs/Momentum/docs
          build-dotnet: false

      - name: Upload to GitHub Pages
        if: steps.options.outputs.deploy-docs == 'true'
        uses: actions/upload-pages-artifact@v4
        with:
          path: libs/Momentum/docs/.vitepress/dist

      - name: Deploy to GitHub Pages
        if: steps.options.outputs.deploy-docs == 'true'
        id: docs-deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Summary
        run: |
          echo "# üìä Deployment Summary"
          echo ""

          if [ "${{ steps.options.outputs.is-test }}" == "true" ]; then
            echo "üß™ **Test Deployment Mode**"
            echo "   - NuGet Source: ${{ steps.options.outputs.nuget-source }}"
            echo ""
          fi

          if [ "${{ steps.options.outputs.deploy-prerelease }}" == "true" ]; then
            if [ "${{ steps.prerelease-version.outputs.skip }}" == "true" ]; then
              echo "‚è≠Ô∏è Pre-release skipped (no consumer-visible changes)"
            elif [ -n "${{ steps.prerelease-version.outputs.version }}" ]; then
              echo "‚úÖ **Pre-release deployed**"
              echo "   - Version: ${{ steps.prerelease-version.outputs.version }}"
              echo "   - Tag: ${{ steps.prerelease-version.outputs.tag }}"
              echo "   - NuGet: ${{ steps.options.outputs.nuget-source }}"
              if [ "${{ steps.options.outputs.is-test }}" != "true" ]; then
                echo "   - GitHub Release: Created"
              fi
            else
              echo "‚ùå **Pre-release failed**"
            fi
          fi

          if [ "${{ steps.options.outputs.deploy-prerelease }}" == "false" ]; then
            if [ -n "${{ steps.release-version.outputs.version }}" ]; then
              echo "‚úÖ **Release deployed**"
              echo "   - Version: ${{ steps.release-version.outputs.version }}"
              echo "   - Tag: ${{ steps.release-version.outputs.tag }}"
              echo "   - NuGet: ${{ steps.options.outputs.nuget-source }}"
              if [ "${{ steps.options.outputs.is-test }}" != "true" ]; then
                echo "   - GitHub Release: Created"
              fi
            else
              echo "‚ùå **Release failed**"
            fi
          fi

          if [ "${{ steps.options.outputs.deploy-docs }}" == "true" ]; then
            if [ -n "${{ steps.docs-deployment.outputs.page_url }}" ]; then
              echo "‚úÖ **Documentation deployed**"
              echo "   - URL: ${{ steps.docs-deployment.outputs.page_url }}"
            else
              echo "‚ùå **Documentation failed**"
            fi
          fi
