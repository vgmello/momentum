{
  "$schema": "http://json.schemastore.org/template",
  "author": "Momentum .NET",
  "classifications": ["Microservices", "CQRS", "EventDriven", "Momentum.NET"],
  "name": "Momentum .NET Template",
  "description": "A comprehensive template for creating domain-driven microservices following standard architecture patterns",
  "identity": "Momentum.Template",
  "shortName": "mmt",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "sourceName": "AppDomain",
  "preferNameDirectory": true,
  "guids": ["4d1e9d4f-ee8a-4d91-8c2b-11e09987ac0b", "5e2f0e5f-ff9b-5e02-9d3c-22f10098bd1c", "310fa8e1-342a-4675-a3f0-f8912a5da0dd"],
  "symbols": {
    "AppDomain": {
      "type": "bind",
      "binding": "name",
      "replaces": "AppDomain",
      "fileRename": "AppDomain",
      "forms": { "global": ["snake"] }
    },
    "aspire": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate AppHost Aspire project (Default)",
      "displayName": "Include AppHost (Aspire) Project",
      "defaultValue": ""
    },
    "api": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate API project (REST/gRPC endpoints) (Default)",
      "displayName": "Include API Project",
      "defaultValue": ""
    },
    "back-office": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate BackOffice project (background event processing) (Default)",
      "displayName": "Include BackOffice Project",
      "defaultValue": ""
    },
    "docs": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generates documentation project (Default)",
      "displayName": "Include Documentation",
      "defaultValue": ""
    },
    "orleans": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate Orleans-based BackOffice project (stateful processing)",
      "displayName": "Include Orleans BackOffice",
      "defaultValue": "false"
    },
    "db": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "description": "Data access setup configuration",
      "displayName": "Data Access Setup",
      "defaultValue": "",
      "choices": [
        {
          "choice": "npgsql",
          "description": "Use PostgreSQL database"
        },
        {
          "choice": "liquibase",
          "description": "Use Liquibase database migrations"
        },
        {
          "choice": "none",
          "description": "No database setup"
        }
      ]
    },
    "no-sample": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Skip generating sample code",
      "displayName": "Skip Sample Content",
      "defaultValue": "false"
    },
    "port": {
      "type": "parameter",
      "datatype": "int",
      "defaultValue": "8100",
      "description": "Base port number for the application services",
      "displayName": "Service Base Port",
      "replaces": "SERVICE_BASE_PORT"
    },
    "all": {
      "type": "computed",
      "value": "!(aspire || api || back-office || docs)"
    },
    "libs": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "description": "Momentum libraries to include as direct project references",
      "displayName": "Momentum Libraries",
      "defaultValue": "none",
      "choices": [
        {
          "choice": "none",
          "description": "Use NuGet packages for all libraries"
        },
        {
          "choice": "defaults",
          "description": "Include Momentum.ServiceDefaults as project reference"
        },
        {
          "choice": "api",
          "description": "Include Momentum.ServiceDefaults.Api as project reference"
        },
        {
          "choice": "ext",
          "description": "Include Momentum.Extensions as project reference"
        },
        {
          "choice": "kafka",
          "description": "Include Momentum.Extensions.Messaging.Kafka as project reference"
        },
        {
          "choice": "generators",
          "description": "Include Momentum.Extensions.SourceGenerators as project reference"
        }
      ]
    },
    "lib-name": {
      "type": "parameter",
      "datatype": "string",
      "description": "Name prefix to replace 'Momentum' in library names and namespaces",
      "displayName": "Library Name Prefix",
      "defaultValue": "Momentum",
      "replaces": "Momentum"
    },
    "org": {
      "type": "parameter",
      "datatype": "string",
      "description": "Organization / Team name",
      "displayName": "Organization / Team name"
    },
    "includeAspire": {
      "type": "computed",
      "value": "(aspire || all)"
    },
    "includeApi": {
      "type": "computed",
      "value": "(api || all)"
    },
    "includeBackOffice": {
      "type": "computed",
      "value": "(back-office || all)"
    },
    "includeDocs": {
      "type": "computed",
      "value": "(docs || all)"
    },
    "includeDb": {
      "type": "computed",
      "value": "((all || db != '') && db != 'none')"
    },
    "includeSample": {
      "type": "computed",
      "value": "(!no-sample)"
    },
    "includeLibs": {
      "type": "computed",
      "value": "(libs != 'none')"
    },
    "dbConfig": {
      "type": "computed",
      "value": "(db == '' ? 'npgsql|liquibase' : db)"
    },
    "useNpgsql": {
      "type": "computed",
      "value": "(includeDb && dbConfig.Contains('npgsql'))"
    },
    "useLiquibase": {
      "type": "computed",
      "value": "(includeDb && dbConfig.Contains('liquibase'))"
    },
    "aspireHttp": {
      "type": "computed",
      "value": "(port + 10000)"
    },
    "aspireHttps": {
      "type": "computed",
      "value": "(port + 10010)"
    },
    "mainApiHttp": {
      "type": "computed",
      "value": "(port + 1)"
    },
    "mainApiHttps": {
      "type": "computed",
      "value": "(port + 11)"
    },
    "mainApiGrpc": {
      "type": "computed",
      "value": "(port + 2)"
    },
    "backOfficeHttp": {
      "type": "computed",
      "value": "(port + 3)"
    },
    "backOfficeHttps": {
      "type": "computed",
      "value": "(port + 13)"
    },
    "orleansHttp": {
      "type": "computed",
      "value": "(port + 4)"
    },
    "orleansHttps": {
      "type": "computed",
      "value": "(port + 14)"
    },
    "documentationHttp": {
      "type": "computed",
      "value": "(port + 19)"
    },
    "orgGen": {
      "type": "generated",
      "generator": "join",
      "replaces": "OrgName",
      "parameters": {
        "symbols": [
          {
            "type": "ref",
            "value": "name"
          },
          {
            "type": "const",
            "value": " Team"
          }
        ]
      }
    }
  },
  "orgName": {
    "type": "generated",
    "generator": "coalesce",
    "parameters": {
      "sourceVariableName": "org",
      "fallbackVariableName": "orgGen"
    },
    "replaces": "OrgName"
  },
  "sources": [
    {
      "source": "./",
      "target": "./",
      "include": ["**/*"],
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        "**/*.lock.json",
        ".template.config/**",
        ".local/**",
        ".idea/**",
        ".git/**",
        ".github/**",
        ".claude/**",
        "requirements/**",
        "libs/**",
        "LICENSE",
        "CLAUDE.md",
        "Momentum.Template.csproj"
      ],
      "modifiers": [
        {
          "condition": "!(includeAspire)",
          "exclude": ["src/AppDomain.AppHost/**/*"]
        },
        {
          "condition": "!(includeApi)",
          "exclude": ["src/AppDomain.Api/**/*"]
        },
        {
          "condition": "!(includeBackOffice)",
          "exclude": ["src/AppDomain.BackOffice/**/*"]
        },
        {
          "condition": "(!orleans)",
          "exclude": ["src/AppDomain.BackOffice.Orleans/**/*"]
        },
        {
          "condition": "(!includeDocs)",
          "exclude": ["docs/**/*"]
        },
        {
          "condition": "(!includeDb)",
          "exclude": ["infra/**/*"]
        },
        {
          "condition": "(!no-sample)",
          "exclude": [
            "**/*Cashier*",
            "**/*cashier*",
            "**/Cashiers/**/*",
            "**/cashiers/**/*",
            "**/*Invoice*",
            "**/*invoice*",
            "**/Invoices/**/*",
            "**/invoices/**/*",
            "src/AppDomain/Cashiers/**/*",
            "src/AppDomain/Invoices/**/*",
            "src/AppDomain.Api/Cashiers/**/*",
            "src/AppDomain.Api/Invoices/**/*",
            "src/AppDomain.BackOffice/Messaging/AppDomainInboxHandler/**/*",
            "src/AppDomain.BackOffice/Invoices/**/*",
            "src/AppDomain.BackOffice.Orleans/Invoices/**/*",
            "infra/AppDomain.Database/Liquibase/AppDomain/cashiers/**/*",
            "infra/AppDomain.Database/Liquibase/AppDomain/invoices/**/*",
            "tests/AppDomain.Tests/Unit/Cashiers/**/*",
            "tests/AppDomain.Tests/Unit/Invoices/**/*",
            "tests/AppDomain.Tests/Integration/Cashiers/**/*",
            "tests/AppDomain.Tests/Integration/Invoices/**/*"
          ]
        },
        {
          "condition": "libs.Contains('defaults')",
          "include": ["libs/Momentum/src/Momentum.ServiceDefaults/**/*", "libs/Momentum/src/Momentum.ServiceDefaults.Api/**/*"]
        }
      ]
    }
  ],
  "primaryOutputs": [
    {
      "condition": "includeApi",
      "path": "src/AppDomain.Api/AppDomain.Api.csproj"
    },
    {
      "condition": "includeBackOffice",
      "path": "src/AppDomain.BackOffice/AppDomain.BackOffice.csproj"
    },
    {
      "condition": "includeOrleans",
      "path": "src/AppDomain.BackOffice.Orleans/AppDomain.BackOffice.Orleans.csproj"
    },
    {
      "condition": "includeAppHost",
      "path": "src/AppDomain.AppHost/AppDomain.AppHost.csproj"
    },
    {
      "condition": "includeDb",
      "path": "infra/AppDomain.Database/AppDomain.Database.csproj"
    },
    {
      "path": "src/AppDomain/AppDomain.csproj"
    },
    {
      "path": "src/AppDomain.Contracts/AppDomain.Contracts.csproj"
    }
  ],
  // "postActions": [
  //   {
  //     "description": "Add projects to solution",
  //     "manualInstructions": [
  //       {
  //         "text": "Add generated project to solution manually."
  //       }
  //     ],
  //     "args": {
  //       "inRoot": true
  //     },
  //     "actionId": "D396686C-DE0E-4DE6-906D-291CD29FC5DE",
  //     "continueOnError": true
  //   },
  //   {
  //     "description": "Restore NuGet packages",
  //     "manualInstructions": [{ "text": "Run 'dotnet restore' to restore NuGet packages" }],
  //     "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
  //     "continueOnError": true
  //   }
  // ]
  "SpecialCustomOperations": {
    "**.slnx": {
      "operations": [
        {
          "type": "conditional",
          "configuration": {
            "actionableIf": ["<!--#if"],
            "actionableElse": ["#else", "<!--#else"],
            "actionableElseif": ["#elseif", "<!--#elseif", "#elif", "<!--#elif"],
            "endif": ["#endif", "<!--#endif"],
            "trim": "true",
            "wholeLine": "true",
            "evaluator": "C++"
          }
        },
        {
          "type": "balancednesting",
          "configuration": {
            "startToken": "<!--",
            "realEndToken": "-->",
            "pseudoEndToken": "-- >",
            "id": "fixPseudoNestedComments",
            "resetFlag": "_TestResetFlag_"
          }
        }
      ]
    }
  },
  "forms": {
    "kebab": { "identifier": "kebabCase" },
    "snake": { "identifier": "snakeCase" }
  }
}
