{
  "$schema": "http://json.schemastore.org/template",
  "author": "Momentum .NET",
  "classifications": [
    "Microservices",
    "CQRS",
    "EventDriven",
    "Momentum.NET"
  ],
  "name": "Momentum .NET Template",
  "description": "A comprehensive template for creating domain-driven microservices following standard architecture patterns",
  "identity": "Momentum.Template",
  "shortName": "mmt",
  "tags": {
    "language": "C#",
    "type": "solution"
  },
  "sourceName": "AppDomain",
  "preferNameDirectory": true,
  "guids": [
    "4d1e9d4f-ee8a-4d91-8c2b-11e09987ac0b",
    "5e2f0e5f-ff9b-5e02-9d3c-22f10098bd1c",
    "310fa8e1-342a-4675-a3f0-f8912a5da0dd",
    "1358a541-294a-491c-a8c3-46ac380e4c69"
  ],
  "symbols": {
    "aspire": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate AppHost Aspire project (Default)",
      "defaultValue": ""
    },
    "web-api": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate API project (REST/gRPC endpoints) (Default)",
      "defaultValue": ""
    },
    "back-office": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate BackOffice project (background event processing) (Default)",
      "defaultValue": ""
    },
    "docs": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generates documentation project (Default)",
      "defaultValue": ""
    },
    "orleans": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Generate Orleans-based BackOffice project (stateful processing)"
    },
    "db": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "description": "Data access setup configuration",
      "defaultValue": "npgsql|liquibase",
      "choices": [
        {
          "choice": "npgsql",
          "description": "Use PostgreSQL database"
        },
        {
          "choice": "liquibase",
          "description": "Use Liquibase database migrations"
        },
        {
          "choice": "none",
          "description": "No database setup"
        }
      ]
    },
    "kafka": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Use Apache Kafka",
      "defaultValue": "true"
    },
    "port": {
      "type": "parameter",
      "datatype": "int",
      "defaultValue": "8100",
      "description": "Base port number for the application services",
      "replaces": "SERVICE_BASE_PORT"
    },
    "org": {
      "type": "parameter",
      "description": "Organization / Team name",
    },
    "no-sample": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Skip generating sample code",
    },
    "project-only": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Only generate the project and its respective files. (no Solution, .gitignore, etc)"
    },
    "libs": {
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "description": "Momentum libraries to include as direct project references",
      "defaultValue": "none",
      "choices": [
        {
          "choice": "none",
          "description": "Use NuGet packages for all libraries"
        },
        {
          "choice": "defaults",
          "description": "Include Momentum.ServiceDefaults as project reference"
        },
        {
          "choice": "api",
          "description": "Include Momentum.ServiceDefaults.Api as project reference"
        },
        {
          "choice": "ext",
          "description": "Include Momentum.Extensions as project reference"
        },
        {
          "choice": "kafka",
          "description": "Include Momentum.Extensions.Messaging.Kafka as project reference"
        },
        {
          "choice": "generators",
          "description": "Include Momentum.Extensions.SourceGenerators as project reference"
        }
      ]
    },
    "lib-name": {
      "type": "parameter",
      "datatype": "string",
      "description": "Name prefix to replace 'Momentum' in library names and namespaces",
      "defaultValue": "Momentum",
      "replaces": "Momentum"
    },
    "ALL": {
      "type": "computed",
      "value": "!(aspire || web-api || back-office || docs)"
    },
    "INCLUDE_ASPIRE": {
      "type": "computed",
      "value": "(aspire || ALL)"
    },
    "INCLUDE_API": {
      "type": "computed",
      "value": "(web-api || ALL)"
    },
    "INCLUDE_BACK_OFFICE": {
      "type": "computed",
      "value": "(back-office || ALL)"
    },
    "INCLUDE_DOCS": {
      "type": "computed",
      "value": "(docs || ALL)"
    },
    "INCLUDE_ORLEANS": {
      "type": "computed",
      "value": "(orleans)"
    },
    "INCLUDE_INFRA_DB": {
      "type": "computed",
      "value": "(db == liquibase)"
    },
    "INCLUDE_SAMPLE": {
      "type": "computed",
      "value": "(!no-sample)"
    },
    "INCLUDE_LIBS": {
      "type": "computed",
      "value": "(libs != none)"
    },
    "HAS_BACKEND": {
      "type": "computed",
      "value": "(INCLUDE_API || INCLUDE_BACK_OFFICE || INCLUDE_ORLEANS)"
    },
    "USE_DB": {
      "type": "computed",
      "value": "(db == npgsql)"
    },
    "USE_KAFKA": {
      "type": "computed",
      "value": "(kafka && HAS_BACKEND)"
    },
    "DefaultOrgName": {
      "type": "generated",
      "generator": "join",
      "parameters": {
        "symbols": [
          {
            "type": "ref",
            "value": "name"
          },
          {
            "type": "const",
            "value": " Team"
          }
        ]
      }
    },
    "OrgName": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "org",
        "fallbackVariableName": "DefaultOrgName"
      },
      "replaces": "ORG_NAME"
    },
    "AppDomainSnakeCase": {
      "type": "derived",
      "valueSource": "name",
      "valueTransform": "snake_case",
      "replaces": "app_domain",
      "fileRename": "app_domain"
    },
    "AppDomainKebab": {
      "type": "derived",
      "valueSource": "name",
      "valueTransform": "kebab-case",
      "replaces": "app-domain",
      "fileRename": "app-domain"
    }
  },
  "sources": [
    {
      "include": [
        "docs/**/*",
        "infra/**/*",
        "libs/**/*",
        "src/**/*",
        "tests/**/*"
      ],
      "exclude": [
        "**/[Bb]in/**",
        "**/[Oo]bj/**",
        ".template.config/**/*",
        "**/*.filelist",
        "**/*.user",
        "**/*.lock.json",
        "**/.vitepress/cache",
        "**/.vitepress/dist"
      ],
      "modifiers": [
        {
          "condition": "(!project-only)",
          "include": [
            ".dockerignore",
            ".editorconfig",
            ".gitattributes",
            ".gitignore",
            ".mcp.json",
            "compose.yml",
            "*.ruleset",
            "*.slnx",
            "*.slnx.DotSettings",
            "*.props",
            ".vscode/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_ASPIRE)",
          "exclude": [
            "src/AppDomain.AppHost/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_API)",
          "exclude": [
            "src/AppDomain.Api/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_BACK_OFFICE)",
          "exclude": [
            "src/AppDomain.BackOffice/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_DOCS)",
          "exclude": [
            "docs/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_ORLEANS)",
          "exclude": [
            "src/AppDomain.BackOffice.Orleans/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_INFRA_DB)",
          "exclude": [
            "infra/AppDomain.Database/**/*"
          ]
        },
        {
          "condition": "(!HAS_BACKEND || project-only)",
          "exclude": [
            "src/AppDomain/**/*",
            "src/AppDomain.Contracts/**/*",
            "tests/AppDomain.Tests/**/*"
          ]
        },
        {
          "condition": "(!INCLUDE_SAMPLE)",
          "exclude": [
            "infra/AppDomain.Database/Liquibase/AppDomain/cashiers/**/*",
            "infra/AppDomain.Database/Liquibase/AppDomain/invoices/**/*",
            "src/AppDomain.Api/Cashiers/**/*",
            "src/AppDomain.Api/Invoices/**/*",
            "src/AppDomain.BackOffice.Orleans/Invoices/**/*",
            "src/AppDomain.BackOffice/Invoices/**/*",
            "src/AppDomain.BackOffice/Messaging/AppDomainInboxHandler/**/*",
            "src/AppDomain/Cashiers/**/*",
            "src/AppDomain/Invoices/**/*"
          ]
        },
        {
          "condition": "libs == 'defaults'",
          "include": [
            "libs/Momentum/src/Momentum.ServiceDefaults/**/*",
            "libs/Momentum/src/Momentum.ServiceDefaults.Api/**/*"
          ]
        }
      ]
    },
    {
      "source": "./",
      "target": "./",
      "include": [
        "ProjectREADME.md"
      ],
      "rename": {
        "ProjectREADME.md": "README.md"
      }
    }
  ],
  "postActions": [
    {
      "condition": "(INCLUDE_API && !project-only)",
      "description": "Add API project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain.Api/AppDomain.Api.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>.Api/<YourSolution>.Api.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(INCLUDE_BACK_OFFICE && !project-only)",
      "description": "Add BackOffice project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain.BackOffice/AppDomain.BackOffice.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>.BackOffice/<YourSolution>.BackOffice.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(INCLUDE_ORLEANS && !project-only)",
      "description": "Add Orleans BackOffice project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain.BackOffice.Orleans/AppDomain.BackOffice.Orleans.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>.BackOffice.Orleans/<YourSolution>.BackOffice.Orleans.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(INCLUDE_ASPIRE && !project-only)",
      "description": "Add AppHost project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain.AppHost/AppDomain.AppHost.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>.AppHost/<YourSolution>.AppHost.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(INCLUDE_INFRA_DB && !project-only)",
      "description": "Add Database project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"infra/AppDomain.Database/AppDomain.Database.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add infra/<YourSolution>.Database/<YourSolution>.Database.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(HAS_BACKEND && !project-only)",
      "description": "Add Contracts project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain.Contracts/AppDomain.Contracts.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>.Contracts/<YourSolution>.Contracts.csproj"
        }
      ],
      "continueOnError": true
    },
    {
      "condition": "(HAS_BACKEND && !project-only)",
      "description": "Add Domain Core project to .slnx",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "applyFileRenamesToArgs": [
        "args"
      ],
      "args": {
        "executable": "dotnet",
        "args": "sln AppDomain.slnx add \"src/AppDomain/AppDomain.csproj\""
      },
      "manualInstructions": [
        {
          "text": "Run: dotnet sln <YourSolution>.slnx add src/<YourSolution>/<YourSolution>.csproj"
        }
      ],
      "continueOnError": true
    }
  ],
  "SpecialCustomOperations": {
    "**.slnx": {
      "operations": [
        {
          "type": "conditional",
          "configuration": {
            "actionableIf": [
              "<!--#if"
            ],
            "actionableElse": [
              "#else",
              "<!--#else"
            ],
            "actionableElseif": [
              "#elseif",
              "<!--#elseif",
              "#elif",
              "<!--#elif"
            ],
            "endif": [
              "#endif",
              "<!--#endif"
            ],
            "trim": "true",
            "wholeLine": "true",
            "evaluator": "C++"
          }
        },
        {
          "type": "balancednesting",
          "configuration": {
            "startToken": "<!--",
            "realEndToken": "-->",
            "pseudoEndToken": "-- >",
            "id": "fixPseudoNestedComments",
            "resetFlag": "_TestResetFlag_"
          }
        }
      ]
    },
    "**.yml": {
      "operations": [
        {
          "type": "conditional",
          "configuration": {
            "actionableIf": [
              "# #if"
            ],
            "actionableElse": [
              "# #else"
            ],
            "actionableElseif": [
              "# #elseif"
            ],
            "endif": [
              "# #endif"
            ],
            "trim": "true",
            "wholeLine": "true",
            "evaluator": "C++"
          }
        }
      ]
    }
  },
  "forms": {
    "kebab-case": {
      "identifier": "kebabCase"
    },
    "dash-to-underscore": {
      "identifier": "replace",
      "pattern": "-",
      "replacement": "_"
    },
    "snake_case": {
      "identifier": "chain",
      "steps": [
        "kebab-case",
        "dash-to-underscore"
      ]
    }
  }
}
