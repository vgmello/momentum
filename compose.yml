services:
  # #if (USE_PGSQL)
  # Database services
  app-domain-db:
    image: postgres:17-alpine
    profiles: [ "db", "api", "backoffice" ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password@} # IMPORTANT: Use a secure, managed secret for production!
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "54320:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # These command-line arguments are tuned for a local performance server.
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=7GB
      -c maintenance_work_mem=256MB
      -c work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_maintenance_workers=4
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c default_statistics_target=100

    volumes:
      - postgres_data:/var/lib/postgresql/data

  # #if (USE_LIQUIBASE)
  app-domain-db-migrations:
    image: liquibase/liquibase:4.32-alpine
    profiles: [ "db", "api", "backoffice" ]
    volumes:
      - ./infra/AppDomain.Database:/app
    depends_on:
      app-domain-db:
        condition: service_healthy
    working_dir: /app
    entrypoint: /bin/sh
    command:
      - -c
      - |
        echo 'Running database migrations...' && \
        liquibase update --defaults-file liquibase.setup.properties --url=jdbc:postgresql://app-domain-db:5432/postgres && \
        liquibase update --defaults-file liquibase.servicebus.properties --url=jdbc:postgresql://app-domain-db:5432/service_bus && \
        liquibase update --url=jdbc:postgresql://app-domain-db:5432/app_domain && \
        echo 'Database migrations completed successfully!'

  # #endif
  # #endif
  # #if (USE_KAFKA)
  # Kafka Infrastructure
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    profiles: [ "messaging", "api", "backoffice" ]
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # #endif

    # #if (INCLUDE_ORLEANS)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    profiles: [ "storage", "api", "backoffice" ]
    ports:
      - "10000:10000" # Blob service
      - "10001:10001" # Queue service
      - "10002:10002" # Table service
    volumes:
      - azurite-data:/data
    command: "azurite --silent --location /data --debug /data/debug.log --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0"
    healthcheck:
      test: [ "CMD-SHELL", "netstat -ltn | grep :10000 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # #endif
  # Aspire Dashboard
  aspire-dashboard:
    image: mcr.microsoft.com/dotnet/aspire-dashboard:9.4
    profiles: [ "aspire" ]
    ports:
      - "18100:18888"
      - "18890:18890"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPIRE_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS=${ASPIRE_ALLOW_ANONYMOUS:-false}
      - ASPIRE_DASHBOARD_FRONTEND_AUTH=none
      - ASPIRE_DASHBOARD_OTLP_AUTH_MODE=${ASPIRE_OTLP_AUTH_MODE:-api-key}
      - ASPIRE_DASHBOARD_OTLP_PRIMARY_API_KEY=${ASPIRE_OTLP_API_KEY:-development-key}
    restart: unless-stopped

  # #if (INCLUDE_API)
  app-domain-api:
    build:
      context: .
      dockerfile: ./src/AppDomain.Api/Dockerfile
    profiles: [ "api" ]
    ports:
      - "8101:8080"
      - "8102:8102" # GRPC HttpPort
    depends_on:
      app-domain-db:
        condition: service_healthy
      app-domain-db-migrations:
        condition: service_completed_successfully
      # #if (INCLUDE_ORLEANS)
      azurite:
        condition: service_healthy
      app-domain-orleans:
        condition: service_healthy
      # #endif
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceName=AppDomain
      # #if (USE_DB)
      - ConnectionStrings__AppDomainDb=Host=app-domain-db;Port=5432;Database=app_domain;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__ServiceBus=Host=app-domain-db;Port=5432;Database=service_bus;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__Messaging=kafka:9092
      # #endif
      # #if (INCLUDE_ORLEANS)
      - ConnectionStrings__Orleans=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://azurite:10002/devstoreaccount1;BlobEndpoint=http://azurite:10000/devstoreaccount1
      # #endif
      - Kestrel__Endpoints__Http__Protocols=Http1
      - Kestrel__Endpoints__Http__Url=http://+:8080
      - Kestrel__Endpoints__Grpc__Protocols=Http2
      - Kestrel__Endpoints__Grpc__Url=http://+:8102
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://aspire-dashboard:18890
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_SERVICE_NAME=app-domain-api
      - OTEL_SERVICE_VERSION=1.0.0
      # Serilog configuration
      - Serilog__MinimumLevel__Default=Warning
      - Serilog__MinimumLevel__Override__AppDomain=Information
      - Serilog__WriteTo__0__Name=Console

    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t 1 -S -O /dev/null http://localhost:8080/health/internal 2>&1 | grep -q 'HTTP/1.[01] 200' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # #endif
  # #if (INCLUDE_BACK_OFFICE)
  app-domain-backoffice:
    build:
      context: .
      dockerfile: ./src/AppDomain.BackOffice/Dockerfile
    profiles: [ "backoffice" ]
    ports:
      - "8103:8080"
    depends_on:
      app-domain-db:
        condition: service_healthy
      app-domain-db-migrations:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceName=AppDomain
      # #if (USE_DB)
      - ConnectionStrings__AppDomainDb=Host=app-domain-db;Port=5432;Database=app_domain;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__ServiceBus=Host=app-domain-db;Port=5432;Database=service_bus;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__Messaging=kafka:9092
      # #endif
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://aspire-dashboard:18890
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_SERVICE_NAME=app-domain-backoffice
      - OTEL_SERVICE_VERSION=1.0.0
      # Serilog configuration
      - Serilog__MinimumLevel__Default=Warning
      - Serilog__MinimumLevel__Override__AppDomain=Information
      - Serilog__WriteTo__0__Name=Console
    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t 1 -S -O /dev/null http://localhost:8080/health/internal 2>&1 | grep -q 'HTTP/1.[01] 200' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # #endif
  # #if (INCLUDE_ORLEANS)
  app-domain-orleans:
    build:
      context: .
      dockerfile: ./src/AppDomain.BackOffice.Orleans/Dockerfile
    profiles: [ "backoffice" ]
    ports:
      - "8104:8080"
      - "8114:11111"
    depends_on:
      azurite:
        condition: service_healthy
      app-domain-db:
        condition: service_healthy
      app-domain-db-migrations:
        condition: service_completed_successfully
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ServiceName=AppDomain
      - ConnectionStrings__Orleans=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://azurite:10002/devstoreaccount1;BlobEndpoint=http://azurite:10000/devstoreaccount1
      # #if (USE_DB)
      - ConnectionStrings__AppDomainDb=Host=app-domain-db;Port=5432;Database=app_domain;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__ServiceBus=Host=app-domain-db;Port=5432;Database=service_bus;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-password@}
      - ConnectionStrings__Messaging=kafka:9092
      # #endif
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://aspire-dashboard:18890
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_SERVICE_NAME=app-domain-orleans
      - OTEL_SERVICE_VERSION=1.0.0
      # Serilog configuration
      - Serilog__MinimumLevel__Default=Warning
      - Serilog__MinimumLevel__Override__AppDomain=Information
      - Serilog__WriteTo__0__Name=Console
    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t 1 -S -O /dev/null http://localhost:8080/dashboard 2>&1 | grep -q 'HTTP/1.[01] 200' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # #endif
  # #if (INCLUDE_DOCS)
  app-domain-docs:
    build:
      context: ./
      dockerfile: docs/Dockerfile
    profiles: [ "docs" ]
    ports:
      - "8119:5173"
    volumes:
      - ./:/app
      - pnpm_node_modules:/app/docs/node_modules
    command: [ "pnpm", "dev", "--host" ]
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5173/index.html || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  # #endif

    # k6 Performance Testing - Run on-demand with: docker compose run --rm k6-performance run /scripts/scenarios/mixed/realistic-workflow.js
  k6-performance:
    image: grafana/k6:latest
    profiles: [ "performance" ]
    ports:
      - "5665:5665" # k6 web dashboard
    volumes:
      - ./tests/performance/k6:/scripts
      - ./tests/performance/results:/results
    environment:
      - API_BASE_URL=http://app-domain-api:8080
      - GRPC_ENDPOINT=app-domain-api:8102
      - ENVIRONMENT=${ENVIRONMENT:-local}
      # k6 Web Dashboard configuration
      - K6_WEB_DASHBOARD=true
      - K6_WEB_DASHBOARD_EXPORT=/results/docker-k6-report.html
    depends_on:
      app-domain-api:
        condition: service_healthy
    networks:
      - default
    # No default command - run tests on-demand with custom arguments
# #if (INCLUDE_ORLEANS || INCLUDE_DOCS)
volumes:
  # #endif
  # #if (INCLUDE_ORLEANS)
  azurite-data:

  # #endif
  # #if (INCLUDE_DOCS)
  pnpm_node_modules:

  # #endif
  postgres_data:
