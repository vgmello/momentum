<Project>
    <Target Name="GenerateLocalVersion" BeforeTargets="Build" Condition=" '$(IsPackable)' == 'true' and '$(Configuration)' == 'Debug' ">
        <PropertyGroup>
            <LocalVersionFilePath>$(MSBuildThisFileDirectory)../../local-mmt-version.txt</LocalVersionFilePath>
            <IsAbstractionsProject Condition="'$(MSBuildProjectName)' == 'Momentum.Extensions.Abstractions'">true</IsAbstractionsProject>
        </PropertyGroup>

        <!-- Generate new version if this is the Abstractions project -->
        <PropertyGroup Condition="'$(IsAbstractionsProject)' == 'true'">
            <LocalVersionSuffix>$([System.DateTime]::UtcNow.ToString("yyMMddHHmmss"))</LocalVersionSuffix>
            <LocalVersion>$(BaseVersion)-pre.$(LocalVersionSuffix)</LocalVersion>
            <LocalFeedAbsolutePath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).local/nuget'))</LocalFeedAbsolutePath>
        </PropertyGroup>

        <!-- Write version file if this is the Abstractions project -->
        <WriteLinesToFile File="$(LocalVersionFilePath)" Lines="$(LocalVersion)" Overwrite="true" Condition="'$(IsAbstractionsProject)' == 'true'" />
        <WriteLinesToFile File="$(MSBuildThisFileDirectory)../../local-feed-path.txt" Lines="$(LocalFeedAbsolutePath)" Overwrite="true" Condition="'$(IsAbstractionsProject)' == 'true'" />

        <!-- Read version file if this is NOT the Abstractions project -->
        <ReadLinesFromFile File="$(LocalVersionFilePath)" Condition="'$(IsAbstractionsProject)' != 'true' and Exists('$(LocalVersionFilePath)')">
            <Output TaskParameter="Lines" PropertyName="LocalVersion"/>
        </ReadLinesFromFile>

        <!-- Set version properties for all packable projects -->
        <PropertyGroup Condition=" '$(LocalVersion)' != '' ">
            <PackageVersion>$(LocalVersion)</PackageVersion>
            <Version>$(LocalVersion)</Version>
        </PropertyGroup>

        <!-- Logging -->
        <Message Text="Generating local version: $(LocalVersion)" Importance="high" Condition="'$(IsAbstractionsProject)' == 'true'" />
        <Message Text="Using shared local version: $(LocalVersion)" Importance="high" Condition="'$(IsAbstractionsProject)' != 'true' and '$(LocalVersion)' != ''" />
        <Warning Text="No local version file found. Build Abstractions project first." Condition="'$(IsAbstractionsProject)' != 'true' and '$(LocalVersion)' == ''" />
    </Target>

    <Target Name="CleanOldPackages" BeforeTargets="Build;Clean" Condition=" '$(IsPackable)' == 'true' and '$(Configuration)' == 'Debug' ">
        <ItemGroup>
            <OldPackagesToDelete Include="$(TargetDir)../*.*upkg"/>
            <OldPackagesToDelete Include="$(MSBuildThisFileDirectory).local/nuget/$(PackageId).$(BaseVersion)*.nupkg"/>
        </ItemGroup>
        <Message Text="Cleaning up $(ProjectName) nupkg files ($(PackageId).$(BaseVersion)*.nupkg). Target: $(TargetDir)" Importance="high"/>
        <Delete Files="@(OldPackagesToDelete)"/>
    </Target>

    <Target Name="PushToLocalFeed" AfterTargets="Pack" Condition=" '$(IsPackable)' == 'true' and '$(Configuration)' == 'Debug'">
        <MakeDir Directories="$(MSBuildThisFileDirectory).local/nuget" Condition="!Exists('$(MSBuildThisFileDirectory).local/nuget')"/>
        <Exec Command="dotnet nuget push &quot;$(PackageOutputPath)$(PackageId).$(PackageVersion).nupkg&quot; --source &quot;$(MSBuildThisFileDirectory).local/nuget&quot;"/>
    </Target>
</Project>
