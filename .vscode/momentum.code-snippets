{
    "Command + Handler": {
        "prefix": "cmdh",
        "body": [
            "public record ${1:Action}Command() : ICommand<Result<${2:Result}>>;",
            "",
            "public class ${1:Action}Validator : AbstractValidator<${1:Action}Command>",
            "{",
            "    public ${1:Action}Validator()",
            "    {",
            "        // TODO: Add validation rules",
            "    }",
            "}",
            "",
            "public static class ${1:Action}CommandHandler",
            "{",
            "    public record DbCommand() : ICommand<int>;",
            "",
            "    public static async Task<(Result<${2:Result}>, ${3:Event}?)> Handle(${1:Action}Command command, IMessageBus messaging,",
            "        CancellationToken cancellationToken)",
            "    {",
            "        var dbCommand = new DbCommand();",
            "        var affected = await messaging.InvokeCommandAsync(dbCommand, cancellationToken);",
            "",
            "        var @event = new ${3:Event}();",
            "        return (default!, @event);",
            "    }",
            "",
            "    public static async Task<int> Handle(DbCommand command, ${4:Datasource} db, CancellationToken cancellationToken)",
            "    {",
            "        // TODO: Implement DB command handling",
            "        return default;",
            "    }",
            "}"
        ],
        "description": "CQRS command/validator/handler skeleton."
    },
    "Query + Handler": {
        "prefix": "qryh",
        "body": [
            "public record ${1:Action}Query() : IQuery<Result<${2:Result}>>;",
            "",
            "public static class ${1:Action}QueryHandler",
            "{",
            "    public static async Task<Result<${2:Result}>> Handle(${1:Action}Query query, ${3:Datasource} db, CancellationToken cancellationToken)",
            "    {",
            "        var entity = await db.${4:EntitySet}",
            "            .FirstOrDefaultAsync(cancellationToken);",
            "",
            "        if (entity is not null)",
            "        {",
            "            return entity.ToModel();",
            "        }",
            "",
            "        return new List<ValidationFailure> { };",
            "    }",
            "}"
        ],
        "description": "CQRS query + handler."
    },
    "HTTP GET action": {
        "prefix": "httpget",
        "body": [
            "/// <summary>",
            "///     Retrieves ${4:description}",
            "/// </summary>",
            "/// <param name=\"request\">The request parameters</param>",
            "/// <param name=\"cancellationToken\">Cancellation token</param>",
            "/// <returns>${4:description}</returns>",
            "/// <response code=\"200\" />",
            "/// <response code=\"404\" />",
            "/// <response code=\"400\" />",
            "[HttpGet]",
            "public async Task<ActionResult<${3:Result}>> ${1:Action}([FromQuery] ${2:Request} request, CancellationToken cancellationToken)",
            "{",
            "    var query = request.ToQuery();",
            "    var result = await bus.InvokeQueryAsync(query, cancellationToken);",
            "",
            "    return result.Match<ActionResult<${3:Result}>>(",
            "        ok => Ok(ok),",
            "        errors => NotFound(new { Errors = errors }));",
            "}"
        ],
        "description": "HTTP GET action (ToQuery + bus.InvokeQueryAsync)."
    },
    "HTTP POST action": {
        "prefix": "httppost",
        "body": [
            "/// <summary>",
            "///     Creates ${4:description}",
            "/// </summary>",
            "/// <param name=\"request\">The creation request</param>",
            "/// <param name=\"cancellationToken\">Cancellation token</param>",
            "/// <returns>The created ${4:description}</returns>",
            "/// <response code=\"201\" />",
            "/// <response code=\"400\" />",
            "/// <response code=\"409\" />",
            "[HttpPost]",
            "public async Task<ActionResult<${3:Result}>> ${1:Action}([FromBody] ${2:Request} request, CancellationToken cancellationToken)",
            "{",
            "    var command = request.ToCommand();",
            "    var result = await bus.InvokeCommandAsync(command, cancellationToken);",
            "",
            "    return result.Match(",
            "        created => StatusCode(StatusCodes.Status201Created, created),",
            "        errors => BadRequest(new { Errors = errors }));",
            "}"
        ],
        "description": "HTTP POST action (ToCommand + bus.InvokeCommandAsync)."
    },
    "HTTP PUT action": {
        "prefix": "httpput",
        "body": [
            "/// <summary>",
            "///     Updates ${4:description}",
            "/// </summary>",
            "/// <param name=\"request\">The update request</param>",
            "/// <param name=\"cancellationToken\">Cancellation token</param>",
            "/// <returns>The updated ${4:description}</returns>",
            "/// <response code=\"200\" />",
            "/// <response code=\"400\" />",
            "/// <response code=\"404\" />",
            "[HttpPut]",
            "public async Task<ActionResult<${3:Result}>> ${1:Action}([FromBody] ${2:Request} request, CancellationToken cancellationToken)",
            "{",
            "    var command = request.ToCommand();",
            "    var result = await bus.InvokeCommandAsync(command, cancellationToken);",
            "",
            "    return result.Match<ActionResult<${3:Result}>>(",
            "        ok => Ok(ok),",
            "        errors => BadRequest(new { Errors = errors }));",
            "}"
        ],
        "description": "HTTP PUT action (ToCommand + bus.InvokeCommandAsync)."
    },
    "HTTP DELETE action": {
        "prefix": "httpdel",
        "body": [
            "/// <summary>",
            "///     Deletes ${4:description}",
            "/// </summary>",
            "/// <param name=\"request\">The deletion request</param>",
            "/// <param name=\"cancellationToken\">Cancellation token</param>",
            "/// <returns>No content if successful</returns>",
            "/// <response code=\"204\" />",
            "/// <response code=\"400\" />",
            "/// <response code=\"404\" />",
            "[HttpDelete]",
            "public async Task<ActionResult> ${1:Action}([FromBody] ${2:Request} request, CancellationToken cancellationToken)",
            "{",
            "    var command = request.ToCommand();",
            "    var result = await bus.InvokeCommandAsync(command, cancellationToken);",
            "",
            "    return result.Match<ActionResult>(",
            "        _ => NoContent(),",
            "        errors => BadRequest(new { Errors = errors }));",
            "}"
        ],
        "description": "HTTP DELETE action (ToCommand + bus.InvokeCommandAsync)."
    }
}
